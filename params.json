{"name":"cordova-plugin-presentation","tagline":"","body":"# Create native multi-screen apps in minutes with the Cordova Presentation API Plugin.\r\n\r\n## For the impatient\r\n\r\nPlease check out our simple [HelloApp](http://fraunhoferfokus.github.io/cordova-plugin-presentation-helloapp/) \r\nto get a first impression on multi-screen app development using this plugin. With the instructions given there the sample app is built in less than a minute!\r\n\r\n## Introduction\r\n\r\nThis document describes the Apache Cordova implementation of the [Presentation API](http://www.w3.org/2014/secondscreen/presentation-api/20140721/) introduced by the [W3C Second Screen Presentation Community Group](http://www.w3.org/community/webscreens/) and which is discussed now within the [Second Screen Presentation Working Group](http://www.w3.org/2014/secondscreen/). The implementation is an open-sourced part of [FAMIUM](http://www.fokus.fraunhofer.de/go/famium), an end-to-end prototype implementation for early technology evaluation and interoperability testing introduced by Fraunhofer FOKUSâ€™ Competence Center [Future Applications and Media](http://www.fokus.fraunhofer.de/go/fame) ([FAME](http://www.fokus.fraunhofer.de/go/fame)). \r\n\r\nUsing this plugin, Presentation API powered apps can be built today, (hopefully not so) long before the Presentation API has landed in our Web browsers. \r\n\r\nThe main purpose of the [Presentation API](http://www.w3.org/2014/secondscreen/presentation-api/20140721/) is to enable web pages to access external presentation-type displays and use them for presenting web content. It aims to make secondary displays such as a projector or a connected TV available to the web and takes into account displays that are attached using wired (HDMI, DVI or similar) and wireless technologies (MiraCast, Chromecast, DLNA, AirPlay or similar). At its core, the specification of the Presentation API enables an exchange of messages between a requesting page and a presentation page shown in the secondary display. How those messages are transmitted is left to the UA in order to allow for use of display devices that can be attached in a wide variety of ways. For example, when a display device is attached using HDMI or MiraCast, the UA on the requesting device can render the requested presentation page in that same UA, but instead of displaying in a window on that same device, it can use whatever means the operating system provides for using those external displays. In that case, both the requesting page and the presentation page run on the requesting device and the operating system is used to route the presentation display output to the other display device. The second display device doesn't need to know anything about this spec or that the content involves HTML5. Alternately, some types of external displays may be able to render HTML5 themselves and may have defined their own way to send messages to that content. In that case, the UA on the requesting device would not need to render the presentation page itself. Instead, the UA could act as a proxy translating the request to show a page and the messages into the form understood by the display device. \r\n\r\nSince the [Presentation API](http://www.w3.org/2014/secondscreen/presentation-api/20140721/) abstracts from all the technologies described above and specifies only the interfaces, there are different ways to implement it depending from the target platform of the controlling device and the presenting display as well as from the technologies and protocols used behind. \r\n\r\nThis Cordova Presentation API Plugin implementation supports currently the following platforms and technologies:\r\n\r\n* iOS devices connecting via AV cable or AirPlay mirroring, utilizing [Multiple Display Programming Guide for iOS](https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/WindowAndScreenGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012555-CH1-SW1)\r\n* Android devices connecting via AV cable or MiraCast, utilizing [Android Presentation API](https://developer.android.com/reference/android/app/Presentation.html)\r\n\r\nFurther implementations of the Presentation API are available at [FAMIUM Webscreens](https://gitlab.fokus.fraunhofer.de/famium/famium-webscreens/wikis/home).\r\n\r\n# License\r\n\r\nCopyright 2014 Fraunhofer FOKUS\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n### Contact\r\n\r\n[Fraunhofer FOKUS - Competence Center FAME // Future Applications and Media](http://www.fokus.fraunhofer.de/en/fame/index.html)\r\n\r\n![.](http://webinos.fokus.fraunhofer.de:3002/piwik/piwik.php?idsite=2&rec=1)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}